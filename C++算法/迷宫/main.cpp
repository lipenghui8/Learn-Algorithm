#include <bits/stdc++.h>

using namespace std;
int a[100][100];//存放地图数据,0表示空地，1表示障碍物
int v[100][100];//访问数组
struct point
{
    int x;
    int y;
    int step;
};
queue<point> r;//申请队列
int dx[4]={0,1,0,-1};//定义方向数组，右、下、左、上
int dy[4]={1,0,-1,0};
int main()
{
    for(int i=0;i<100;i++)
        for(int j=0;j<100;j++)
        a[i][j]=1;
    int m,n;
    int startx,starty,p,q;//起点和终点坐标
    //输入m行n列
    scanf("%d%d",&m,&n);
    getchar();
    for(int i=1;i<=m;i++)
    {
        for(int j=1;j<=n;j++)
        {
            a[i][j]=getchar()-'0';
        }
        getchar();
    }
    scanf("%d%d%d%d",&startx,&starty,&p,&q);
    //BFS
    point start;//定义起点
    start.x=startx;
    start.y=starty;
    start.step=0;
    r.push(start);//起点入队
    v[startx][starty]=1;//将起点设置为已访问

    int flag=0;//定义标记，记录是否存在解
    while(!r.empty())
    {
        int x=r.front().x,y=r.front().y;//取出队首元素
        if(x==p&&y==q)//当到达终点时退出循环
        {
            flag=1;
            printf("%d",r.front().step);
            break;
        }
        for(int k=0;k<=3;k++)
        {
            int tx,ty;//定义拓展方向
            tx=x+dx[k];
            ty=y+dy[k];
            if(a[tx][ty]==0&&v[tx][ty]==0)
            {
                //入队
                point temp;//定义拓展的点
                temp.x=tx;
                temp.y=ty;
                temp.step=r.front().step+1;
                r.push(temp);
                v[tx][ty]=0;
            }
        }
        r.pop();//拓展完了将队首元素出队
    }
    if(flag==0)
        printf("no answer!");
    return 0;
}
/*
30 50
01010101001011001001010110010110100100001000101010
00001000100000101010010000100000001001100110100101
01111011010010001000001101001011100011000000010000
01000000001010100011010000101000001010101011001011
00011111000000101000010010100010100000101100000000
11001000110101000010101100011010011010101011110111
00011011010101001001001010000001000101001110000000
10100000101000100110101010111110011000010000111010
00111000001010100001100010000001000101001100001001
11000110100001110010001001010101010101010001101000
00010000100100000101001010101110100010101010000101
11100100101001001000010000010101010100100100010100
00000010000000101011001111010001100000101010100011
10101010011100001000011000010110011110110100001000
10101010100001101010100101000010100000111011101001
10000000101100010000101100101101001011100000000100
10101001000000010100100001000100000100011110101001
00101001010101101001010100011010101101110000110101
11001010000100001100000010100101000001000111000010
00001000110000110101101000000100101001001000011101
10100101000101000000001110110010110101101010100001
00101000010000110101010000100010001001000100010101
10100001000110010001000010101001010101011111010010
00000100101000000110010100101001000001000000000010
11010000001001110111001001000011101001011011101000
00000110100010001000100000001000011101000000110011
10101000101000100010001111100010101001010000001000
10000010100101001010110000000100101010001011101000
00111100001000010000000110111000000001000000001011
10000001100111010111010001000110111010101101111000
1 1 30 50
*/
